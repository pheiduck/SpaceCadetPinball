name: Make Release Builds

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  ASSETS_URL: https://archive.org/download/winXP-pinball/Win32.Pinball.zip

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      sw_version: ${{ steps.get_version.outputs.sw_version }}
    steps:
      - uses: actions/checkout@main

      - name: Extract version from build-mac-app.sh
        id: get_version
        run: |
          sw_version=$(grep "sw_version=" build-mac-app.sh | head -n1 | sed "s/.*['\"]\([0-9.]*\)['\"].*/\1/")
          echo "Detected version: $sw_version"
          echo "sw_version=$sw_version" >> $GITHUB_OUTPUT

  build-macos:
    needs: extract-version
    runs-on: macos-latest
    timeout-minutes: 25
    outputs:
      dmg_name: ${{ steps.find_dmg.outputs.dmg_name }}
    steps:
      - uses: actions/checkout@main

      - name: Build macOS App (.dmg)
        run: bash build-mac-app.sh

      - name: Verify build output
        run: ls -R

      - name: Get .dmg file name
        id: find_dmg
        run: |
          FILE=$(ls SpaceCadetPinball-mac-*.dmg | head -n 1)
          if [[ -z "$FILE" ]]; then
            echo "❌ Could not find .dmg!"
            exit 1
          fi
          echo "dmg_name=$FILE" >> $GITHUB_OUTPUT

      - name: Upload macOS artifact
        uses: actions/upload-artifact@main
        with:
          name: mac-build
          path: ${{ steps.find_dmg.outputs.dmg_name }}

  build-linux:
    needs: extract-version
    runs-on: ubuntu-latest
    timeout-minutes: 25
    outputs:
      tar_name: ${{ steps.find_tar.outputs.tar_name }}
    steps:
      - uses: actions/checkout@main

      - name: Cache SDL2
        uses: actions/cache@v3
        with:
          path: ${{ runner.home }}/sdl2-build
          key: sdl2-static-${{ hashFiles('SDL2-2.32.10.tar.gz', 'SDL2_mixer-2.8.1.tar.gz') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake wget tar \
            libasound2-dev libpulse-dev libudev-dev \
            libx11-dev libxext-dev libxinerama-dev libxcursor-dev \
            libxi-dev libgl1-mesa-dev
          wget https://www.libsdl.org/release/SDL2-2.32.10.tar.gz
          tar xvf SDL2-2.32.10.tar.gz
          cd SDL2-2.32.10
          ./configure --disable-shared --enable-static --prefix=$HOME/sdl2-build
          make -j$(nproc)
          make install
          cd ..
          wget https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-2.8.1.tar.gz
          tar xvf SDL2_mixer-2.8.1.tar.gz
          cd SDL2_mixer-2.8.1
          ./configure --disable-shared --enable-static --prefix=$HOME/sdl2-build
          make -j$(nproc)
          make install
          cd ..

      - name: Build Linux binary from source
        run: |
          mkdir -p build
          cd build
          export SDL2_DIR=$HOME/sdl2-build
          export CMAKE_PREFIX_PATH=$SDL2_DIR:$CMAKE_PREFIX_PATH
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
          make -j$(nproc)
          cd ..

      - name: Package Linux binary with assets
        run: |
          sw_version='${{ needs.extract-version.outputs.sw_version }}'
          BINARY="/home/runner/work/SpaceCadetPinball/SpaceCadetPinball/bin/SpaceCadetPinball"
          if [[ ! -f "$BINARY" ]]; then
            echo "❌ Could not find Linux binary at $BINARY"
            exit 1
          fi

          mkdir release
          cp "$BINARY" release/
          curl -L -o Win32.Pinball.zip $ASSETS_URL
          unzip -o Win32.Pinball.zip -d PinballAssets/
          cp -a PinballAssets/Pinball/* release/
          rm -f release\PINBALL.EXE

          cd release
          tar -czf SpaceCadetPinball-Linux-x86_64-${sw_version}.tar.gz *
          cd ..
          rm -rf Win32.Pinball.zip PinballAssets

      - name: Get .tar.gz file name
        id: find_tar
        run: |
          sw_version=${{ needs.extract-version.outputs.sw_version }}
          FILE=$(ls release/SpaceCadetPinball-Linux-x86_64-${sw_version}.tar.gz | head -n 1)
          echo "tar_name=$FILE" >> $GITHUB_OUTPUT

      - name: Upload Linux artifact
        uses: actions/upload-artifact@main
        with:
          name: linux-build
          path: ${{ steps.find_tar.outputs.tar_name }}

  build-windows:
    needs: extract-version
    runs-on: windows-latest
    timeout-minutes: 25
    outputs:
      zip_name: ${{ steps.find_zip.outputs.zip_name }}
    steps:
      - uses: actions/checkout@main

      - name: Cache vcpkg packages
        uses: actions/cache@main
        with:
          path: C:/vcpkg/packages
          key: vcpkg-${{ runner.os }}-${{ hashFiles('C:/vcpkg/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Install dependencies
        run: |
          C:\vcpkg\vcpkg.exe install sdl2:x64-windows-static sdl2-mixer:x64-windows-static
        shell: pwsh

      - name: Build Windows binary
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" `
            -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DSDL2_INCLUDE_DIR=C:/vcpkg/installed/x64-windows-static/include `
            -DSDL2_LIBRARY=C:/vcpkg/installed/x64-windows-static/lib/SDL2.lib `
            -DSDL2_MIXER_INCLUDE_DIR=C:/vcpkg/installed/x64-windows-static/include `
            -DSDL2_MIXER_LIBRARIES=C:/vcpkg/installed/x64-windows-static/lib/SDL2_mixer.lib
          cmake --build . --config Release
          cd ..
        shell: pwsh

      - name: Locate binary and copy to release
        run: |
          mkdir release
          $exe = "D:\a\SpaceCadetPinball\SpaceCadetPinball\bin\SpaceCadetPinball.exe"
          if (-not (Test-Path $exe)) {
            Write-Error "❌ Could not find SpaceCadetPinball.exe at $exe"
            exit 1
          }
          Copy-Item $exe release\
        shell: pwsh

      - name: Copy SDL2 runtime DLLs
        run: |
          Copy-Item "C:\vcpkg\installed\x64-windows\bin\*.dll" release\
          Write-Host "✅ Copied SDL2 and related runtime DLLs"
        shell: pwsh

      - name: Download game assets
        run: |
          curl -L -o Win32.Pinball.zip $env:ASSETS_URL
          mkdir PinballAssets
          unzip -o Win32.Pinball.zip -d PinballAssets
        shell: pwsh

      - name: Package Windows release with assets
        run: |
          Copy-Item -Recurse PinballAssets\Pinball\* release\
          Remove-Item release\PINBALL.EXE -Force
          cd release
          powershell Compress-Archive -Path * -DestinationPath SpaceCadetPinball-Windows-x64-${{ needs.extract-version.outputs.sw_version }}.zip
        shell: pwsh

      - name: Get .zip file name
        id: find_zip
        run: |
          $file = Get-ChildItem -Path release -Filter *.zip | Select-Object -First 1
          echo "zip_name=$($file.Name)" >> $env:GITHUB_OUTPUT
        shell: pwsh
  
      - name: Upload Windows artifact
        uses: actions/upload-artifact@main
        with:
          name: windows-build
          path: ${{ github.workspace }}/release/${{ steps.find_zip.outputs.zip_name }}

  release:
      needs: [extract-version, build-macos, build-linux, build-windows]
      runs-on: ubuntu-latest
      steps:
        - name: Download all artifacts
          uses: actions/download-artifact@main
          with:
            path: ./release
  
        - name: Create GitHub Release
          id: create_release
          uses: actions/create-release@main
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v${{ needs.extract-version.outputs.sw_version }}
            release_name: SpaceCadetPinball ${{ needs.extract-version.outputs.sw_version }}
            draft: false
            prerelease: false
            token: ${{ secrets.GH_TOKEN }}
  
        - name: Upload all release assets
          uses: actions/github-script@main
          env:
            UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
          with:
            script: |
              const fs = require('fs');
              const path = require('path');
              const uploadUrl = process.env.UPLOAD_URL;
              const files = fs.readdirSync('./release').flatMap(dir =>
                fs.readdirSync(path.join('./release', dir)).map(f => path.join('./release', dir, f))
              ).filter(f => /\.(zip|dmg|tar\.gz)$/.test(f));
  
              for (const file of files) {
                console.log(`Uploading ${file}`);
                await github.rest.repos.uploadReleaseAsset({
                  url: uploadUrl,
                  headers: { 'content-type': 'application/octet-stream' },
                  name: path.basename(file),
                  data: fs.readFileSync(file)
                });
              }

name: Make Release Builds

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Automated Release'
        required: true
        type: string

env:
  ASSETS_URL: https://archive.org/download/winXP-pinball/Win32.Pinball.zip

jobs:
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 20
    outputs:
      dmg_name: ${{ steps.find_dmg.outputs.dmg_name }}
    steps:
      - uses: actions/checkout@main
        with:
          ref: master

      - name: Build macOS App
        run: bash build-mac-app.sh

      - name: Download game assets
        run: |
          echo "Downloading Pinball assets..."
          curl -L -o Win32.Pinball.zip $ASSETS_URL
          unzip -o Win32.Pinball.zip -d PinballAssets/
          cp -a PinballAssets/Pinball/* SpaceCadetPinball.app/Contents/Resources/
          rm -rf Win32.Pinball.zip PinballAssets/

      - name: Get .dmg file name
        id: find_dmg
        run: |
          FILE=$(ls SpaceCadetPinball-*-mac.dmg | head -n 1)
          echo "dmg_name=$FILE" >> $GITHUB_OUTPUT

      - name: Upload macOS artifact
        uses: actions/upload-artifact@main
        with:
          name: mac-build
          path: ${{ steps.find_dmg.outputs.dmg_name }}

  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      tar_name: ${{ steps.find_tar.outputs.tar_name }}
    steps:
      - uses: actions/checkout@main
        with:
          ref: master

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake libsdl2-dev libsdl2-mixer-dev curl unzip

      - name: Build Linux binary
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          cd ..

      - name: Download and bundle assets
        run: |
          echo "Downloading Pinball assets..."
          curl -L -o Win32.Pinball.zip $ASSETS_URL
          unzip -o Win32.Pinball.zip -d PinballAssets/
          mkdir -p release/Pinball
          cp build/SpaceCadetPinball release/
          cp -a PinballAssets/Pinball/* release/Pinball/
          cd release
          tar -czf SpaceCadetPinball-Linux-x86_64.tar.gz *
          cd ..
          rm -rf Win32.Pinball.zip PinballAssets/
        shell: bash

      - name: Get .tar.gz file name
        id: find_tar
        run: |
          FILE=$(ls release/SpaceCadetPinball-*-Linux-x86_64.tar.gz | head -n 1)
          echo "tar_name=$FILE" >> $GITHUB_OUTPUT

      - name: Upload Linux artifact
        uses: actions/upload-artifact@main
        with:
          name: linux-build
          path: ${{ steps.find_tar.outputs.tar_name }}

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 25
    outputs:
      zip_name: ${{ steps.find_zip.outputs.zip_name }}
    steps:
      - uses: actions/checkout@main
        with:
          ref: master

      - name: Install dependencies
        run: |
          choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install ninja curl unzip -y
        shell: powershell

      - name: Build Windows binary
        run: |
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cd ..
          mkdir release

          if (Test-Path build\\SpaceCadetPinball.exe) {
            Copy-Item build\\SpaceCadetPinball.exe release\\
          } elseif (Test-Path build\\Release\\SpaceCadetPinball.exe) {
            Copy-Item build\\Release\\SpaceCadetPinball.exe release\\
          } else {
            Write-Error "❌ Could not find SpaceCadetPinball.exe after build."
            exit 1
          }
        shell: pwsh

      - name: Download game assets
        run: |
          echo "Downloading Pinball assets..."
          curl -L -o Win32.Pinball.zip $env:ASSETS_URL
          mkdir PinballAssets
          unzip -o Win32.Pinball.zip -d PinballAssets
        shell: pwsh

      - name: Package game with assets
        run: |
          echo "Packaging SpaceCadetPinball with game assets..."
          mkdir release\\Pinball
          Copy-Item -Recurse PinballAssets\\Pinball\\* release\\Pinball\\
          cd release
          powershell Compress-Archive -Path * -DestinationPath SpaceCadetPinball-Windows-x64.zip
        shell: pwsh

      - name: Get .zip file name
        id: find_zip
        run: |
          $file = Get-ChildItem -Path release -Filter *.zip | Select-Object -First 1
          echo "zip_name=$($file.Name)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Upload Windows artifact
        uses: actions/upload-artifact@main
        with:
          name: windows-build
          path: ${{ github.workspace }}/release/${{ steps.find_zip.outputs.zip_name }}

  release:
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          path: ./release

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload all release assets
        uses: actions/github-script@v7
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const uploadUrl = process.env.UPLOAD_URL;
            const files = fs.readdirSync('./release').filter(f => /\.(zip|dmg|tar\.gz)$/.test(f));
            for (const file of files) {
              console.log(`Uploading ${file}`);
              await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: { 'content-type': 'application/octet-stream' },
                name: path.basename(file),
                data: fs.readFileSync(`./release/${file}`)
              });
            }
